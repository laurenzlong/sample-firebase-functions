"use strict";
// The MIT License (MIT)
//
// Copyright (c) 2017 Firebase
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
/** @internal */
function dateToTimestampProto(timeString) {
    if (typeof timeString === 'undefined') {
        return;
    }
    let date = new Date(timeString);
    let seconds = Math.floor(date.getTime() / 1000);
    let nanos = 0;
    if (timeString.length > 20) {
        const nanoString = timeString.substring(20, timeString.length - 1);
        const trailingZeroes = 9 - nanoString.length;
        nanos = parseInt(nanoString, 10) * Math.pow(10, trailingZeroes);
    }
    return { seconds, nanos };
}
exports.dateToTimestampProto = dateToTimestampProto;
;
/** @internal */
function objectToValueProto(data) {
    var isPlainObject = function (input) {
        return typeof input === 'object' &&
            input !== null &&
            _.isEqual(Object.getPrototypeOf(input), Object.prototype);
    };
    var encodeHelper = function (val) {
        if (typeof val === 'string') {
            return {
                stringValue: val
            };
        }
        if (typeof val === 'boolean') {
            return {
                booleanValue: val
            };
        }
        if (typeof val === 'number') {
            if (val % 1 === 0) {
                return {
                    integerValue: val
                };
            }
            return {
                doubleValue: val
            };
        }
        if (val instanceof Date) {
            return {
                timestampValue: val.toISOString()
            };
        }
        if (val instanceof Array) {
            var encodedElements = [];
            for (var i = 0; i < val.length; ++i) {
                var enc = encodeHelper(val[i]);
                if (enc) {
                    encodedElements.push(enc);
                }
            }
            return {
                arrayValue: {
                    values: encodedElements
                }
            };
        }
        if (val === null) {
            return {
                nullValue: 'NULL_VALUE'
            };
        }
        if (val instanceof Buffer || val instanceof Uint8Array) {
            return {
                bytesValue: val
            };
        }
        if (isPlainObject(val)) {
            return {
                mapValue: {
                    fields: objectToValueProto(val)
                }
            };
        }
        throw new Error('Cannot encode ' + val + 'to a Firestore Value.' +
            ' The emulator does not yet support Firestore document reference values or geo points.');
    };
    return _.mapValues(data, encodeHelper);
}
exports.objectToValueProto = objectToValueProto;
;
